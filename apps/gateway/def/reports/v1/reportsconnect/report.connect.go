// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reports/v1/report.proto

package reportsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nikpau/spotimy/apps/gateway/def/reports/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReportServiceName is the fully-qualified name of the ReportService service.
	ReportServiceName = "reports.v1.ReportService"
)

// ReportServiceClient is a client for the reports.v1.ReportService service.
type ReportServiceClient interface {
	GetReport(context.Context, *connect_go.Request[v1.GetReportRequest]) (*connect_go.Response[v1.GetReportResponse], error)
}

// NewReportServiceClient constructs a client for the reports.v1.ReportService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReportServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reportServiceClient{
		getReport: connect_go.NewClient[v1.GetReportRequest, v1.GetReportResponse](
			httpClient,
			baseURL+"/reports.v1.ReportService/GetReport",
			opts...,
		),
	}
}

// reportServiceClient implements ReportServiceClient.
type reportServiceClient struct {
	getReport *connect_go.Client[v1.GetReportRequest, v1.GetReportResponse]
}

// GetReport calls reports.v1.ReportService.GetReport.
func (c *reportServiceClient) GetReport(ctx context.Context, req *connect_go.Request[v1.GetReportRequest]) (*connect_go.Response[v1.GetReportResponse], error) {
	return c.getReport.CallUnary(ctx, req)
}

// ReportServiceHandler is an implementation of the reports.v1.ReportService service.
type ReportServiceHandler interface {
	GetReport(context.Context, *connect_go.Request[v1.GetReportRequest]) (*connect_go.Response[v1.GetReportResponse], error)
}

// NewReportServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReportServiceHandler(svc ReportServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/reports.v1.ReportService/GetReport", connect_go.NewUnaryHandler(
		"/reports.v1.ReportService/GetReport",
		svc.GetReport,
		opts...,
	))
	return "/reports.v1.ReportService/", mux
}

// UnimplementedReportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReportServiceHandler struct{}

func (UnimplementedReportServiceHandler) GetReport(context.Context, *connect_go.Request[v1.GetReportRequest]) (*connect_go.Response[v1.GetReportResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reports.v1.ReportService.GetReport is not implemented"))
}
