// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: music/tracks/v1/history.proto

package tracksconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nikpau/spotimy/apps/gateway/def/music/tracks/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TrackHistoryServiceName is the fully-qualified name of the TrackHistoryService service.
	TrackHistoryServiceName = "music.tracks.v1.TrackHistoryService"
)

// TrackHistoryServiceClient is a client for the music.tracks.v1.TrackHistoryService service.
type TrackHistoryServiceClient interface {
	ListTrackHistory(context.Context, *connect_go.Request[v1.ListTrackHistoryRequest]) (*connect_go.Response[v1.ListTrackHistoryResponse], error)
}

// NewTrackHistoryServiceClient constructs a client for the music.tracks.v1.TrackHistoryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTrackHistoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TrackHistoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &trackHistoryServiceClient{
		listTrackHistory: connect_go.NewClient[v1.ListTrackHistoryRequest, v1.ListTrackHistoryResponse](
			httpClient,
			baseURL+"/music.tracks.v1.TrackHistoryService/ListTrackHistory",
			opts...,
		),
	}
}

// trackHistoryServiceClient implements TrackHistoryServiceClient.
type trackHistoryServiceClient struct {
	listTrackHistory *connect_go.Client[v1.ListTrackHistoryRequest, v1.ListTrackHistoryResponse]
}

// ListTrackHistory calls music.tracks.v1.TrackHistoryService.ListTrackHistory.
func (c *trackHistoryServiceClient) ListTrackHistory(ctx context.Context, req *connect_go.Request[v1.ListTrackHistoryRequest]) (*connect_go.Response[v1.ListTrackHistoryResponse], error) {
	return c.listTrackHistory.CallUnary(ctx, req)
}

// TrackHistoryServiceHandler is an implementation of the music.tracks.v1.TrackHistoryService
// service.
type TrackHistoryServiceHandler interface {
	ListTrackHistory(context.Context, *connect_go.Request[v1.ListTrackHistoryRequest]) (*connect_go.Response[v1.ListTrackHistoryResponse], error)
}

// NewTrackHistoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTrackHistoryServiceHandler(svc TrackHistoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/music.tracks.v1.TrackHistoryService/ListTrackHistory", connect_go.NewUnaryHandler(
		"/music.tracks.v1.TrackHistoryService/ListTrackHistory",
		svc.ListTrackHistory,
		opts...,
	))
	return "/music.tracks.v1.TrackHistoryService/", mux
}

// UnimplementedTrackHistoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTrackHistoryServiceHandler struct{}

func (UnimplementedTrackHistoryServiceHandler) ListTrackHistory(context.Context, *connect_go.Request[v1.ListTrackHistoryRequest]) (*connect_go.Response[v1.ListTrackHistoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("music.tracks.v1.TrackHistoryService.ListTrackHistory is not implemented"))
}
