// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: music/artists/v1/artist.proto

package artistsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nikpau/spotimy/apps/gateway/def/music/artists/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ArtistServiceName is the fully-qualified name of the ArtistService service.
	ArtistServiceName = "music.artists.v1.ArtistService"
)

// ArtistServiceClient is a client for the music.artists.v1.ArtistService service.
type ArtistServiceClient interface {
	ListArtists(context.Context, *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error)
}

// NewArtistServiceClient constructs a client for the music.artists.v1.ArtistService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtistServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ArtistServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &artistServiceClient{
		listArtists: connect_go.NewClient[v1.ListArtistsRequest, v1.ListArtistsResponse](
			httpClient,
			baseURL+"/music.artists.v1.ArtistService/ListArtists",
			opts...,
		),
	}
}

// artistServiceClient implements ArtistServiceClient.
type artistServiceClient struct {
	listArtists *connect_go.Client[v1.ListArtistsRequest, v1.ListArtistsResponse]
}

// ListArtists calls music.artists.v1.ArtistService.ListArtists.
func (c *artistServiceClient) ListArtists(ctx context.Context, req *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error) {
	return c.listArtists.CallUnary(ctx, req)
}

// ArtistServiceHandler is an implementation of the music.artists.v1.ArtistService service.
type ArtistServiceHandler interface {
	ListArtists(context.Context, *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error)
}

// NewArtistServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtistServiceHandler(svc ArtistServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/music.artists.v1.ArtistService/ListArtists", connect_go.NewUnaryHandler(
		"/music.artists.v1.ArtistService/ListArtists",
		svc.ListArtists,
		opts...,
	))
	return "/music.artists.v1.ArtistService/", mux
}

// UnimplementedArtistServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtistServiceHandler struct{}

func (UnimplementedArtistServiceHandler) ListArtists(context.Context, *connect_go.Request[v1.ListArtistsRequest]) (*connect_go.Response[v1.ListArtistsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("music.artists.v1.ArtistService.ListArtists is not implemented"))
}
