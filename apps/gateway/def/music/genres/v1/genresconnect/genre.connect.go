// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: music/genres/v1/genre.proto

package genresconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nikpau/spotimy/apps/gateway/def/music/genres/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GenresServiceName is the fully-qualified name of the GenresService service.
	GenresServiceName = "music.genres.v1.GenresService"
)

// GenresServiceClient is a client for the music.genres.v1.GenresService service.
type GenresServiceClient interface {
	ListGenres(context.Context, *connect_go.Request[v1.ListGenresRequest]) (*connect_go.Response[v1.ListGenresResponse], error)
}

// NewGenresServiceClient constructs a client for the music.genres.v1.GenresService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGenresServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GenresServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &genresServiceClient{
		listGenres: connect_go.NewClient[v1.ListGenresRequest, v1.ListGenresResponse](
			httpClient,
			baseURL+"/music.genres.v1.GenresService/ListGenres",
			opts...,
		),
	}
}

// genresServiceClient implements GenresServiceClient.
type genresServiceClient struct {
	listGenres *connect_go.Client[v1.ListGenresRequest, v1.ListGenresResponse]
}

// ListGenres calls music.genres.v1.GenresService.ListGenres.
func (c *genresServiceClient) ListGenres(ctx context.Context, req *connect_go.Request[v1.ListGenresRequest]) (*connect_go.Response[v1.ListGenresResponse], error) {
	return c.listGenres.CallUnary(ctx, req)
}

// GenresServiceHandler is an implementation of the music.genres.v1.GenresService service.
type GenresServiceHandler interface {
	ListGenres(context.Context, *connect_go.Request[v1.ListGenresRequest]) (*connect_go.Response[v1.ListGenresResponse], error)
}

// NewGenresServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGenresServiceHandler(svc GenresServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/music.genres.v1.GenresService/ListGenres", connect_go.NewUnaryHandler(
		"/music.genres.v1.GenresService/ListGenres",
		svc.ListGenres,
		opts...,
	))
	return "/music.genres.v1.GenresService/", mux
}

// UnimplementedGenresServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGenresServiceHandler struct{}

func (UnimplementedGenresServiceHandler) ListGenres(context.Context, *connect_go.Request[v1.ListGenresRequest]) (*connect_go.Response[v1.ListGenresResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("music.genres.v1.GenresService.ListGenres is not implemented"))
}
