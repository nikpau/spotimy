# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: reports/v1/report.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Report(betterproto.Message):
    report: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class GetReportRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetReportResponse(betterproto.Message):
    report: "Report" = betterproto.message_field(1)


class ReportServiceStub(betterproto.ServiceStub):
    async def get_report(
        self,
        get_report_request: "GetReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReportResponse":
        return await self._unary_unary(
            "/reports.v1.ReportService/GetReport",
            get_report_request,
            GetReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ReportServiceBase(ServiceBase):
    async def get_report(
        self, get_report_request: "GetReportRequest"
    ) -> "GetReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_report(
        self, stream: "grpclib.server.Stream[GetReportRequest, GetReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/reports.v1.ReportService/GetReport": grpclib.const.Handler(
                self.__rpc_get_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReportRequest,
                GetReportResponse,
            ),
        }
